// Code generated by MockGen. DO NOT EDIT.
// Source: ./db.go

// Package mock_golink is a generated GoMock package.
package golink

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDatabase) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDatabaseMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDatabase)(nil).Delete), arg0)
}

// DeleteStats mocks base method.
func (m *MockDatabase) DeleteStats(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStats", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStats indicates an expected call of DeleteStats.
func (mr *MockDatabaseMockRecorder) DeleteStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStats", reflect.TypeOf((*MockDatabase)(nil).DeleteStats), arg0)
}

// Load mocks base method.
func (m *MockDatabase) Load(arg0 string) (*Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].(*Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockDatabaseMockRecorder) Load(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockDatabase)(nil).Load), arg0)
}

// LoadAll mocks base method.
func (m *MockDatabase) LoadAll() ([]*Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAll")
	ret0, _ := ret[0].([]*Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAll indicates an expected call of LoadAll.
func (mr *MockDatabaseMockRecorder) LoadAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAll", reflect.TypeOf((*MockDatabase)(nil).LoadAll))
}

// LoadStats mocks base method.
func (m *MockDatabase) LoadStats() (ClickStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadStats")
	ret0, _ := ret[0].(ClickStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadStats indicates an expected call of LoadStats.
func (mr *MockDatabaseMockRecorder) LoadStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadStats", reflect.TypeOf((*MockDatabase)(nil).LoadStats))
}

// Save mocks base method.
func (m *MockDatabase) Save(arg0 *Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockDatabaseMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDatabase)(nil).Save), arg0)
}

// SaveStats mocks base method.
func (m *MockDatabase) SaveStats(arg0 ClickStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveStats", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveStats indicates an expected call of SaveStats.
func (mr *MockDatabaseMockRecorder) SaveStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveStats", reflect.TypeOf((*MockDatabase)(nil).SaveStats), arg0)
}
